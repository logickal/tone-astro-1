---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="The second experiment">
    <main>
        <h1>Experiment 2</h1>
        <p>
            This is the second experiment I undertook to start learning to work
            with Tone.js, with assistance from TonalJs as well.
        </p>
        <p>
            We will ultimately descripbe it here.
        </p>

        <p></p>

        <p id="key-text">
            Click the button to start a two-part generative piece of music.
        </p>
        <button class="btn btn-primary" onclick="toggleSound()">Audio On</button
        >
    </main>
</Layout>

<script type="module">
    import * as Tone from "https://cdn.skypack.dev/tone";
    import { Scale } from "https://cdn.skypack.dev/@tonaljs/tonal";
    import { MusicVAE } from 'https://cdn.skypack.dev/@magenta/music@^1.0.0';
    

    // Set up our pitches for the random melodies.  We pick a tonic at random, then use the minor scale of that tonic.
    const tonicsOld = [
        "C",
        "C#",
        "D",
        "D#",
        "E",
        "F",
        "F#",
        "G",
        "G#",
        "A",
        "A#",
        "B",
    ]; // All possible tonics

    const keyMapping = { 'C': 0, 'C#': 1, 'D': 2, 'D#': 3, 'E': 4, 'F': 5, 'F#': 6, 'G': 7, 'G#': 8, 'A': 9, 'A#': 10, 'B': 11 }; // Mapping from musical keys to integers


    // The MusicVAE model
    const model = new MusicVAE('https://storage.googleapis.com/magentadata/js/checkpoints/music_vae/mel_2bar_small');
    await model.initialize();


    // Set up our audio devices
    const reverb = new Tone.Reverb({
        decay: 5,
        preDelay: 0.2,
        wet: 0.6,
    }).toDestination();
    const filter = new Tone.Filter(100, "lowpass");
    const delay = new Tone.FeedbackDelay("4n.", 0.65).toDestination();

    // Synth config and creation
    const synth1 = new Tone.Synth();
    const synth2 = new Tone.Synth();
    let isPlaying = false;
    let loop1, loop2;

    // Synth 1 is our main melodic synth.
    synth1.set({
        oscillator: {
            type: "fmsine",
        },
        envelope: {
            attack: 0.05,
            decay: 0.4,
            sustain: 0.3,
            release: 0.4,
        },
        volume: -12,
    });

    // The filter LFO.
    const filterLFO = new Tone.LFO({
        type: "sine",
        frequency: 1,
        min: 50,
        max: 2000,
    }).start();
    filterLFO.connect(filter.frequency);

    // An LFO to modulate the rate of the filter LFO.
    const rateLFO = new Tone.LFO({
        type: "sine",
        frequency: 0.35,
        min: 0.1,
        max: 3,
    }).start();
    rateLFO.connect(filterLFO.frequency);

    // Our signal chain
    synth1.chain(filter, delay);
    synth2.connect(reverb);
    delay.connect(reverb);

    // The main toggleSound function and play loop.
    window.toggleSound = async () => {
        if (!isPlaying) {
            const tonics = Object.keys(keyMapping);
            const randomTonic =
                tonics[Math.floor(Math.random() * tonics.length)]; // Select a random tonic
            const scale = Scale.get(`${randomTonic} minor`).notes; // Get the notes in the minor scale of the random tonic
            let key = tonics[randomTonic];

            const sample = await model.sample(1, { temperature: 0.5, key: randomTonic });
            const notes1 = sample[0].notes.filter(note => note.pitch >=  60 && note.pitch <= 72);
            const notes2 = sample[0].notes.filter(note => note.pitch >= 48 && note.pitch <= 60);
            // Set up our loop intervals for the random melodies
            let loopIntervals = ["2n", "1n", "4n"];

            loop1 = new Tone.Sequence((time, note) => {
                synth1.triggerAttackRelease(Tone.Frequency(note.pitch, 'midi'), '8n', time);
            }, notes1, loopIntervals[Math.floor(Math.random() * loopIntervals.length)]).start(0);

            loop2 = new Tone.Sequence((time, note) => {
                synth2.triggerAttackRelease(Tone.Frequency(note.pitch, 'midi'), '2n', time);
            }, notes2, "1m").start(0);

            Tone.start();
            Tone.Transport.start();
            document.getElementById("key-text").textContent =
                `This is a 2-part generative piece in the key of ${key} minor. Click the button to generate another piece of music.`;
            isPlaying = true;
        } else {
            loop1.stop(0);
            loop2.stop(0);
            Tone.Transport.stop();
            isPlaying = false;
        }
    };
</script>
