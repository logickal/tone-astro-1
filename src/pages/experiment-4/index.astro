---
import Layout from "../../layouts/Layout.astro";
import Player from "../../components/Player.astro";
---

<Layout title="The fourth experiment">
    <main class="prose mx-auto py-15">
        <h1>Experiment 4</h1>

        <p>
            Tried to implement a play button in a component but sharing state
            wasn't working. Rather, it was working, but if I made the page
            script a module it broke the state sharing. I'm sure there's another
            way to do it, but I don't want to spend more time on it.
        </p>

        <p>
            After the Third experiments, I felt like I was starting to grasp a bit how to handle starting and stopping events on the timeline.  I decided to take a slightly different approach for this one, namely - instantiate 4 players with 4 random samples.  The pool of samples to select from is small (4 individual files), but this array of four samples could be any of them, including dupliaces.  Then, the loop would execute and schedule one of the non-playing players to start at a random time, and play for a random duration.  The duration is constrained to be between 90 and 120 seconds.  The first player is scheduled to start immediately and play for a random duration between 100 and 120 seconds.  The loop is scheduled to start at 45 seconds, and then every 45 seconds after that (The first player is set playing right out of the box).  The players are then stopped after their duration has elapsed, then put back into the non-playing state for selection.
        </p>

        <p>
            I ran into issues with this one for reasons I couldn't quite fathom, but that I suspect were around passing the players as part of handing them into the loop. Once I simplified the code to be more linear, things started working more reliably, but I really would like more modular code that at least doesn't break my brain trying to follow the execution.
        </p>

        <button class="btn btn-primary" onclick="toggleSound()">Audio On</button
        >
    </main>
</Layout>

<script type="module">
    import * as Tone from "https://cdn.skypack.dev/tone";
    //subscribe to isPlaying store for play button.

    let isPlaying = false;
    let getRandom = (min, max) => {
        return Math.random() * (max - min) + min;
    };

    // Initialize our effects.

    // Reverb
    // Delay4
    // Delay2
    const reverb = new Tone.Reverb({
        decay: 8,
        preDelay: 0.1,
        wet: 0.75,
    }).toDestination();
    const delay4 = new Tone.FeedbackDelay(800, 0.65).set({ wet: 0.5 });
    const delay2 = new Tone.FeedbackDelay(1600, 0.65).set({ wet: 0.5 });

    const filter4 = new Tone.Filter(1000, "lowpass");
    const filter2 = new Tone.Filter(900, "lowpass");

    delay4.connect(filter4);
    delay2.connect(filter2);
    filter2.connect(reverb);
    filter4.connect(reverb);

    let randomEffect = () => {
        let effects = [reverb, delay4, delay2];
        return effects[Math.floor(Math.random() * effects.length)];
    };

    // Our Audiofile Choices
    let audioFiles = {
        "audio/4pos.mp3": "A",
        "audio/bathing-hands.mp3": "C",
        "audio/carter.mp3": "C",
        "audio/cmin.mp3": "C",
    };

    // Select a random audio file from the list with random audiofile.
    let paths = Object.keys(audioFiles);
    let randomAudioFile = () => {
        return paths[Math.floor(Math.random() * paths.length)];
    };

    // Initialize our mixer?.

    // Initialize our audio players.
    // Create an array with 4 random selections from our audio files - it is intentional that we may want the same file selected multiple times.
    let randomFiles = Array.from({ length: 4 }, () => randomAudioFile());
    // Create an array with 4 tone players from our selected files.
    let players = [];
    // Configure the players with random configurations.

    randomFiles.forEach((file) => {
        let player = new Tone.Player(file);
        player.loop = true;
        player.autostart = false;
        // Randomly selected start and end points

        // random but constrained fade in and fade out
        player.fadeIn = getRandom(5, 20);
        player.fadeOut = getRandom(5, 20);
        // Connected to a random effect from the chains - reverb, delay4, delay2.
        player.connect(randomEffect());
        player.name = file;
        players.push(player);
        console.log(player);
    });

    // Select a player to start from any player that isn't playing.
    let selectPlayer = (players) => {
        let player = players[Math.floor(Math.random() * players.length)];
        console.log("player state: " + player.state);
        if (player.state == "playing") {
            selectPlayer(players);
        } else {
            return players.indexOf(player);
        }
    };

    let playSchedule = (player, time, duration) => {
        console.log("Buffer Loaded");
        Tone.Transport.scheduleOnce(() => {
            const duration = player.buffer.duration;
            console.log("Duration " + duration);
            const loopLength = Math.min(getRandom(1, 5), duration);
            console.log("Loop Length " + loopLength);
            const start = Math.random() * (duration - loopLength);
            console.log("Start " + start);
            player.startPoint = start;
            player.setLoopPoints(start, start + loopLength);
            player.start(0, player.startPoint);
            Tone.Transport.scheduleOnce(() => {
                console.log("stopping" + player.name);
                player.stop();
            }, `+${duration}`);
        }, `+${time}`);
    };

    let mainLoop = () => {
        Tone.loaded().then(() => {
            console.log("Tone is Loaded)");
            Tone.Transport.bpm.value = 55;
            delay2.set({
                delayTime: "2m",
            });
            delay4.set({
                delayTime: "4m",
            });

            console.log("Starting Tone and transport");
            Tone.Transport.start();
            console.log("These are the players");
            console.log(players);
            // play the first player for between 100-120 seconds.
            let firstDuration = getRandom(100, 120);
            // The first player should start immediately

            playSchedule(players[selectPlayer(players)], 0, firstDuration);
            // Select a player to start, then play for a random duration.
            let loop = new Tone.Loop((time) => {
                let duration = getRandom(90, 120);
                playSchedule(
                    players[selectPlayer(players)],
                    getRandom(1, 10),
                    duration,
                );
            }, "45").start("+45");
        });
    };

    window.toggleSound = () => {
        if (!isPlaying) {
            isPlaying = true;
            console.log("Toggling Sound");
            Tone.start();
            console.log("Waiting for Tone....");

            Tone.loaded().then(() => {
                console.log("Tone is Loaded)");
                Tone.Transport.bpm.value = 55;
                delay2.set({
                    delayTime: "2m",
                });
                delay4.set({
                    delayTime: "4m",
                });

                console.log("Starting Tone and transport");
                Tone.Transport.start();
                console.log("These are the players");
                console.log(players);
                // play the first player for between 100-120 seconds.
                let firstDuration = getRandom(100, 120);
                // The first player should start immediately

                playSchedule(players[selectPlayer(players)], 0, firstDuration);
                // Select a player to start, then play for a random duration.
                let loop = new Tone.Loop((time) => {
                    let duration = getRandom(90, 120);
                    playSchedule(
                        players[selectPlayer(players)],
                        getRandom(1, 10),
                        duration,
                    );
                }, "45").start("+45");
            });

            //  mainLoop();
        } else {
            Tone.Transport.stop();
            isPlaying = false;
        }
    };
</script>
